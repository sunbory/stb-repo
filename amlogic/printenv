gxl_p211_v1#printenv
1080i_h=1043
1080i_w=1853
1080i_x=33
1080i_y=18
1080p_h=1043
1080p_w=1853
1080p_x=33
1080p_y=18
480i_h=433
480i_w=649
480i_x=35
480i_y=23
480p_h=433
480p_w=649
480p_x=35
480p_y=23
576i_h=554
576i_w=680
576i_x=20
576i_y=11
576p_h=554
576p_w=680
576p_x=20
576p_y=11
720p_h=691
720p_w=1229
720p_x=25
720p_y=14
aml_dt=gxl_p211_1g
audiodrcmode=0
baudrate=115200
boardid=8
bootargs=rootfstype=ramfs init=/init console=ttyS0,115200 no_console_suspend earlyprintk=aml-uart,0xc81004c0 ramoops.pstore_en=1 ramoops.record_size=0x8000 ramoops.console_size=0x4000 use_cma_first=1 androidboot.selinux=disabled logo=osd1,loaded,0x3d800000,1080p50hz vout=1080p50hz,enable hdmimode=1080p50hz cvbsmode=576cvbs hdmitx= cvbsdrv=1 androidboot.firstboot=1 jtag=apee quiet androidboot.hardware=amlogic androidboot.boardid=8 androidboot.serialno=CC2501225B0B153160 androidboot.deviceid=020211502008458 mac=8C:6D:50:7C:FB:F5 androidboot.mac=8C:6D:50:7C:FB:F5
bootcmd=run storeboot
bootdelay=1
bootup_offset=0x11300c0
bootup_size=0x1c2048
cmdline_keys=`
if keyman init 0x1234; then 
	if keyman read usid ${loadaddr} str; then 
		setenv bootargs ${bootargs} androidboot.serialno=${usid};
	fi;
	if keyman read usid2 ${loadaddr} str; then 
		setenv bootargs ${bootargs} androidboot.deviceid=${usid2};
	fi;
	if keyman read mac ${loadaddr} str; then 
		setenv bootargs ${bootargs} mac=${mac} androidboot.mac=${mac};
	fi;
	if keyman read deviceid ${loadaddr} str; then 
		setenv bootargs ${bootargs} androidboot.deviceid=${deviceid};
	fi;
fi;`
cvbs_drv=1
cvbsmode=576cvbs
digitaudiooutput=PCM
display_bpp=16
display_color_bg=0
display_color_fg=0xffff
display_color_index=16
display_height=1080
display_layer=osd1
display_width=1920
dtb_mem_addr=0x1000000
ethact=dwmac.c9410000
ethaddr=00:15:18:01:81:31
factory_reset_poweroff_protect=`
echo wipe_data=${wipe_data}; 
echo wipe_cache=${wipe_cache};
if test ${wipe_data} = failed; then 
	run init_display; 
	run storeargs;
	if mmcinfo; then 
		run recovery_from_sdcard;
	fi;
	if usb start 0; then 
		run recovery_from_udisk;
	fi;
	run recovery_from_flash;
fi; 
if test ${wipe_cache} = failed; then 
	run init_display; 
	run storeargs;
	if mmcinfo; then 
		run recovery_from_sdcard;
	fi;
	if usb start 0; then 
		run recovery_from_udisk;
	fi;
	run recovery_from_flash;
fi;`
fb_addr=0x3d800000
fb_height=720
fb_width=1280
fdt_high=0x20000000
firstboot=1
gatewayip=10.18.9.1
hdmimode=1080p50hz
hostname=arm_gxbb
init_display=imgread pic logo bootup $loadaddr;bmp pixel $bootup_offset;osd open;osd clear;bmp display $bootup_offset;bmp scale
initargs=rootfstype=ramfs init=/init console=ttyS0,115200 no_console_suspend earlyprintk=aml-uart,0xc81004c0 ramoops.pstore_en=1 ramoops.record_size=0x8000 ramoops.console_size=0x4000 use_cma_first=1 androidboot.selinux=disabled
ipaddr=10.18.9.97
irremote_update=`
if irkey 0x29d64cb3 0x6996c43b 0x728ddd22 200000; then 
	echo read irkey ok!; 
	if itest ${irkey_value} == 0x29d64cb3; then 
		run update;
	else 
		if itest ${irkey_value} == 0x6996c43b; then 
			run update;
		else 
			if itest ${irkey_value} == 0x728ddd22; then 
				run update;
			fi;
		fi;
	fi;
fi;`
jtag=apee
judge_factory_reset_protect=`
echo into judge_factory_reset_protect;
if test ${wipe_data} = failed; then 
	echo wipe_data=${wipe_data};
	if test ${reboot_mode} = cold_boot; then 
		run factory_reset_poweroff_protect;
	fi;
fi;
if test ${wipe_cache} = failed; then 
	echo wipe_cache=${wipe_cache};
	if test ${reboot_mode} = cold_boot; then 
		run factory_reset_poweroff_protect;
	fi;
fi;`
loadaddr=1080000
mac=8C:6D:50:7C:FB:F5
netmask=255.255.255.0
outputmode=1080p50hz
preboot=run factory_reset_poweroff_protect;run init_display;run upgrade_check;run storeargs;run upgrade_key;run switch_bootmode;
reboot_mode=normal
recovery_from_flash=`
setenv bootargs ${bootargs} aml_dt=${aml_dt} recovery_part={recovery_part} recovery_offset={recovery_offset};
if imgread kernel ${recovery_part} ${loadaddr} ${recovery_offset}; then 
	wipeisb; 
	bootm ${loadaddr}; 
fi`
recovery_from_sdcard=`
if fatload mmc 0 ${loadaddr} aml_autoscript; then 
	autoscr ${loadaddr}; 
fi;
if fatload mmc 0 ${loadaddr} recovery.img; then 
	if fatload mmc 0 ${dtb_mem_addr} dtb.img; then 
		echo sd dtb.img loaded; 
	fi;
	wipeisb; 
	bootm ${loadaddr};
fi;`
recovery_from_udisk=`
if fatload usb 0 ${loadaddr} aml_autoscript; then 
	autoscr ${loadaddr}; 
fi;
if fatload usb 0 ${loadaddr} recovery.img; then 
	if fatload usb 0 ${dtb_mem_addr} dtb.img; then 
		echo udisk dtb.img loaded; 
	fi;
	wipeisb; 
	bootm ${loadaddr};
fi;`
recovery_offset=0
recovery_part=recovery
sdc_burning=sdc_burn ${sdcburncfg}
sdcburncfg=aml_sdc_burn.ini
serverip=10.18.9.113
stderr=serial
stdin=serial
stdout=serial
storeargs=setenv bootargs ${initargs} logo=${display_layer},loaded,${fb_addr},${outputmode} vout=${outputmode},enable hdmimode=${hdmimode} cvbsmode=${cvbsmode} hdmitx=${cecconfig} cvbsdrv=${cvbs_drv} androidboot.firstboot=${firstboot} jtag=${jtag} quiet; setenv bootargs ${bootargs} androidboot.hardware=amlogic androidboot.boardid=${boardid};run cmdline_keys;
storeboot=if imgread kernel boot ${loadaddr}; then bootm ${loadaddr}; fi;run update;
switch_bootmode=`
get_rebootmode;
echo rebootmode=${reboot_mode};
if test ${reboot_mode} = factory_reset; then 
	run recovery_from_flash;
else 
	if test ${reboot_mode} = update; then 
		run update;
	fi;
fi;`
try_auto_burn=update 700 750;
uimode=1080p
update=`
run usb_burning; 
run sdc_burning; 
if mmcinfo; then 
	run recovery_from_sdcard;
fi;
if usb start 0; then 
	run recovery_from_udisk;
fi;
run recovery_from_flash;`
upgrade_check=`
echo upgrade_step=${upgrade_step}; 
if itest ${upgrade_step} == 3; then 
	run init_display; 
	run storeargs; 
	run update;
else 
	if itest ${upgrade_step} == 1; then 
		defenv_reserv; 
		setenv upgrade_step 2; 
		saveenv; 
		run init_display;
	fi;
fi;`
upgrade_key=if gpio input GPIOAO_2; then echo detect upgrade key; sleep 5; run update;fi;
upgrade_step=2
usb_burning=update 1000
usid=CC2501225B0B153160
usid2=020211502008458
wipe_cache=successful
wipe_data=successfulSecd

Environment size: 5998/65532 bytes
gxl_p211_v1#

gxl_p211_v1#?
?       - alias for 'help'
aml_sysrecovery- Burning with amlogic format package from partition sysrecovery
amlmmc  - AMLMMC sub system
autoscr - run script from memory
base    - print or set address offset
bmp     - manipulate BMP image data
booti   - boot arm64 Linux Image image from memory
bootm   - boot application image from memory
bootp   - boot image via network using BOOTP/TFTP protocol
cbusreg - cbus register read/write
clkmsr  - measure PLL clock
cmp     - memory compare
cp      - memory copy
crc32   - checksum calculation
cvbs    - CVBS sub-system
dcache  - enable or disable data cache
defenv_reserv- reserve some specified envs after defaulting env
dhcp    - boot image via network using DHCP/TFTP protocol
echo    - echo args to console
efuse   - efuse read/write data commands
efuse_user- efuse user space read write ops
emmc    - EMMC sub system
env     - environment handling commands
exit    - exit script
false   - do nothing, unsuccessfully
fatinfo - print information about filesystem
fatload - load binary file from a dos filesystem
fatls   - list files in a directory (default /)
fatsize - determine a file's size
fdt     - flattened device tree utility commands
get_rebootmode- get reboot mode
go      - start application at address 'addr'
gpio    - query and control gpio pins
hdmitx  - HDMITX sub-system
help    - print command description/usage
i2c     - I2C sub-system
icache  - enable or disable instruction cache
imgread - Read the image from internal flash with actual size
irkey   - irkey key_value1 key_value2 key_value3 time_value
itest   - return true/false on integer compare
jtagoff - disable jtag
jtagon  - enable jtag
keyman  - Unify key ops interfaces based dts cfg
keyunify- key unify sub-system
loop    - infinite loop on address range
macreg  - ethernet mac register read/write/dump
md      - memory display
mm      - memory modify (auto-incrementing address)
mmc     - MMC sub system
mmcinfo - display MMC info
mw      - memory write (fill)
mwm     - mw mask function
nm      - memory modify (constant address)
open_scp_log- print SCP messgage
osd     - osd sub-system
phyreg  - ethernet phy register read/write/dump
ping    - send ICMP ECHO_REQUEST to network host
printenv- print environment variables
rarpboot- boot image via network using RARP/TFTP protocol
read_temp- cpu temp-system
reboot  - set reboot mode and reboot system
reset   - Perform RESET of the CPU
rsvmem  - reserve memory
run     - run commands in an environment variable
saradc  - saradc sub-system
saradc_12bit- saradc sub-system
saveenv - save environment variables to persistent storage
sdc_burn- Burning with amlogic format package in sdmmc
sdc_update- Burning a partition with image file in sdmmc card
set_trim_base- cpu temp-system
set_usb_boot- set usb boot mode
setenv  - set environment variables
showvar - print local hushshell variables
sleep   - delay execution for some time
store   - STORE sub-system
systemoff- system off
temp_triming- cpu temp-system
test    - minimal test like /bin/sh
tftpboot- boot image via network using TFTP protocol
true    - do nothing, successfully
unpackimg- un pack logo image into pictures
update  - Enter v2 usbburning mode
usb     - USB sub-system
usb_burn- Burning with amlogic format package in usb
usb_update- Burning a partition with image file in usb host
usbboot - boot from USB device
version - print monitor, compiler and linker version
vout    - VOUT sub-system
vpu     - vpu sub-system
wipeisb - wipeisb
write_trim- cpu temp-system
write_version- cpu temp-system
gxl_p211_v1#help dhcp

